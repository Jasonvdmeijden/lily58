
<<<<<<< HEAD
  /*
  * Copyright (c) 2020 The ZMK Contributors
  *
  * SPDX-License-Identifier: MIT
  */

  #include <behaviors.dtsi>
  #include <dt-bindings/zmk/keys.h>
  #include <dt-bindings/zmk/bt.h>
  #include <dt-bindings/zmk/ext_power.h>

  / {
    keymap {
      compatible = "zmk,keymap";
  layer0 {
          bindings = <
          &kp ESCAPE &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp GRAVE &kp TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp MINUS &kp LEFT_CONTROL &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMICOLON &kp SINGLE_QUOTE &kp LEFT_SHIFT &kp Z &kp X &kp C &kp V &kp B [[KC_LCBR]] [[KC_RCBR]] &kp N &kp M &kp COMMA &kp DOT &kp SLASH &kp ENTER &kp LEFT_ALT &mo 1 &kp LEFT_GUI &kp SPACE &kp SPACE &kp BACKSPACE &mo 2 &kp DELETE
          >;
        };layer1 {
          bindings = <
          &kp ESCAPE [[KC_EXLM]] [[KC_AT]] [[KC_HASH]] [[KC_DLR]] [[KC_PERC]] [[KC_CIRC]] [[KC_AMPR]] [[KC_ASTR]] [[KC_LPRN]] [[KC_RPRN]] [[KC_TILD]] &trans &mo 4 &kp HOME &kp UP &kp END &none [[KC_PLUS]] &kp HOME &kp UP &kp END &none [[KC_UNDS]] &trans &kp LA(A) &kp LEFT &kp DOWN &kp RIGHT &none &kp KP_EQUAL &kp LEFT &kp DOWN &kp RIGHT [[KC_COLN]] [[KC_DQUO]] &trans &kp LA(Z) &kp LA(X) &kp LA(C) &kp LA(V) &kp PRINTSCREEN [[KC_LPRN]] [[KC_RPRN]] &kp PRINTSCREEN &none &kp COMMA &kp DOT &kp BACKSLASH &trans &trans &none &trans &trans &trans &trans &mo 3 &trans
          >;
        };layer2 {
          bindings = <
          &trans [[KC_EXLM]] [[KC_AT]] [[KC_HASH]] [[KC_DLR]] [[KC_PERC]] [[KC_CIRC]] [[KC_AMPR]] [[KC_ASTR]] [[KC_LPRN]] [[KC_RPRN]] [[KC_TILD]] &trans &mo 4 &kp HOME &kp UP &kp END [[KC_PLUS]] &none &kp HOME &kp UP &kp END &mo 4 [[KC_UNDS]] &trans &kp LA(A) &kp LEFT &kp DOWN &kp RIGHT &kp KP_EQUAL &none &kp LEFT &kp DOWN &kp RIGHT [[KC_COLN]] [[KC_DQUO]] &trans &kp LA(Z) &kp LA(X) &kp LA(C) &kp LA(V) &kp KP_N0 [[KC_LPRN]] [[KC_RPRN]] &kp PRINTSCREEN &none [[KC_LT]] [[KC_GT]] &kp BACKSLASH &trans &trans &mo 3 &trans &trans &trans &trans &none &trans
          >;
        };layer3 {
          bindings = <
          &none &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &none &sys_reset &none &none &none &none &none &none &none &none &sys_reset &kp F12 &none &none &kp LA(SPACE) [[RSFT(KC_ENT)]] &kp RC(RS(TAB)) &kp LA(F) &kp LA(F) &kp LC(TAB) [[RSFT(KC_ENT)]] &kp LA(SPACE) &none &none &none &none &none &none &none &none &kp LEFT_BRACKET &kp RIGHT_BRACKET &none &none &none &none &none &none &trans &trans &trans &trans &trans &trans &trans &trans
          >;
        };layer4 {
          bindings = <
          &none &none &none &none &none &none &none &none &none &none &none &tog 8 &none &trans &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &sys_reset &sys_reset &none &none &none &none &none &none &none &none &none &none &none &none &none &none
          >;
        };layer5 {
          bindings = <
          
          >;
        };layer6 {
          bindings = <
          
          >;
        };layer7 {
          bindings = <
          
          >;
        };layer8 {
          bindings = <
          &none &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &tog 8 &none &none &kp Q &kp W &kp E &kp R &none &none &none &none &none &none &none &none &kp A &kp S &kp D &none &none &none &none &none &none &none &kp G &kp Z &kp X &kp C &kp V &kp B &none &none &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6 &kp V &kp LEFT_CONTROL &kp LEFT_SHIFT &kp SPACE &kp DELETE &kp RIGHT_ALT &kp RIGHT_GUI &kp RIGHT_CONTROL
          >;
        };layer9 {
          bindings = <
          &none &none &none &none &none &none &none &none &none &none &none &trans &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none &none
          >;
=======
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        holdtapmod: holdtapmod {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAPMOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <30>;
        };

        tapqoutes: tapqoutes {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPQOUTES";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        tapholdbt: tapholdbt {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLDBT";
            bindings = <&bt>, <&bt>;

            #binding-cells = <2>;
            tapping-term-ms = <30>;
        };

        layertap: layertap {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYERTAP";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 2>, <&to 3>;
        };

        holdlayertapkp: holdlayertapkp {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDLAYERTAPKP";
            bindings = <&kp>, <&layertap>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        tapbracket: tapbracket {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPBRACKET";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        tapbrace: tapbrace {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPBRACE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;
        };

        tapparenthesis: tapparenthesis {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPPARENTHESIS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;
        };

        tapgreaterthan: tapgreaterthan {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPGREATERTHAN";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&kp LESS_THAN>;
        };

        tapslash: tapslash {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPSLASH";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp BACKSLASH>;
        };

        tappaste: tappaste {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPPASTE";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>, <&kp LG(V)>;
        };

        tapend: tapend {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPEND";
            #binding-cells = <0>;
            bindings = <&kp LC(END)>, <&kp LG(K_BACK)>;
        };

        taphome: taphome {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPHOME";
            #binding-cells = <0>;
            bindings = <&kp LC(HOME)>, <&kp LG(HOME)>;
        };

        tapcolon: tapcolon {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPCOLON";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMICOLON>;
        };

        tapunderscore: tapunderscore {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPUNDERSCORE";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp NUMBER_1      &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5  &kp NUMBER_6                                &kp N7         &kp N8     &kp N9      &kp N0   &kp MINUS     &kp EQUAL
&kp TAB           &kp Q         &kp W         &kp E         &kp R   &kp T                                       &kp Y          &kp U      &kp I       &kp O    &kp P         &kp LEFT_WIN
&kp ESC           &kp A         &kp S         &kp D         &kp F   &kp G                                       &kp H          &kp J      &kp K       &kp L    &kp SEMI      &tapqoutes
&kp LEFT_CONTROL  &kp Z         &kp X         &kp C         &kp V   &kp B           &kp LC(P)    &kp LC(LS(P))  &kp N          &kp M      &kp COMMA   &kp DOT  &kp QUESTION  &kp ENTER
                                              &kp LALT      &mo 1   &kp LEFT_SHIFT  &kp SPACE    &kp SPACE      &kp BACKSPACE  &layertap  &kp DELETE
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH       &kp DOLLAR      &kp PERCENT  &kp CARET                                &kp AMPERSAND    &kp ASTERISK     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS     &kp PLUS
&trans           &none        &kp LC(SLASH)  &kp LC(PERIOD)  &kp LC(S)    &kp LC(Y)                                &kp EXCLAMATION  &kp EQUAL        &tapgreaterthan       &kp PLUS               &kp ASTERISK  &kp TILDE
&trans           &kp LC(A)    &kp LC(X)      &kp LC(C)       &tappaste    &kp LC(Z)                                &kp AMPS         &tapparenthesis  &tapbrace             &tapbracket            &tapcolon     &kp GRAVE
&trans           &none        &none          &none           &none        &none      &kp LG(LS(S))    &kp LC(TAB)  &kp PIPE         &kp DOLLAR       &kp PERCENT           &tapunderscore         &tapslash     &trans
                                             &trans          &trans       &trans     &trans           &trans       &trans           &trans           &trans
            >;
        };

        layer_3 {
            bindings = <
&kp F1  &kp F2     &kp F3          &kp F4          &kp F5     &kp F6                    &kp F7     &kp F8          &kp F9            &kp F10       &kp F11  &kp F12
&trans  &none      &taphome        &kp UP_ARROW    &tapend    &none                     &none      &kp LC(X)       &kp LC(C)         &tappaste     &none    &none
&trans  &kp LC(A)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &none                     &kp ENTER  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &none    &none
&trans  &none      &none           &none           &none      &none   &none     &none   &none      &kp LC(Z)       &kp LC(Y)         &none         &none    &trans
                                   &trans          &trans     &trans  &trans    &trans  &trans     &trans          &trans
            >;
        };

        layer_2 {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &out OUT_TOG                  &none  &none  &none  &none  &soft_off  &ext_power EP_ON
&none       &none         &none         &none         &none         &none                         &none  &none  &none  &none  &none      &none
&none       &none         &none         &none         &none         &none                         &none  &none  &none  &none  &none      &none
&none       &none         &none         &none         &none         &none         &none    &none  &none  &none  &none  &none  &none      &none
                                        &none         &trans        &none         &none    &none  &none  &none  &none
            >;
>>>>>>> origin/zmk
        };
    };
  };
  
