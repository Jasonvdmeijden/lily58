/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        holdtapmod: holdtapmod {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTAPMOD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <30>;
        };

        tapqoutes: tapqoutes {
            compatible = "zmk,behavior-tap-dance";
            label = "TAPQOUTES";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        tapholdbt: tapholdbt {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLDBT";
            bindings = <&bt>, <&bt>;

            #binding-cells = <2>;
            tapping-term-ms = <30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp NUMBER_1      &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5  &kp NUMBER_6                            &kp N7         &kp N8      &kp N9        &kp N0   &kp MINUS     &kp EQUAL
&kp TAB           &kp Q         &kp W         &kp E         &kp R   &kp T                                   &kp Y          &kp U       &kp I         &kp O    &kp P         &kp ESCAPE
&kp CAPS          &kp A         &kp S         &kp D         &kp F   &kp G                                   &kp H          &kp J       &kp K         &kp L    &kp SEMI      &tapqoutes
&kp LEFT_CONTROL  &kp Z         &kp X         &kp C         &kp V   &kp B           &kp HOME     &kp END    &kp N          &kp M       &kp COMMA     &kp DOT  &kp QUESTION  &kp ENTER
                                              &kp LALT      &mo 1   &kp LEFT_SHIFT  &kp SPACE    &kp SPACE  &kp BACKSPACE  &kp DELETE  &kp LEFT_WIN
            >;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp F1  &kp F2            &kp F3          &kp F4          &kp F5     &kp F6                                                                                &kp F7           &kp F8                                     &kp F9                                    &kp F10                     &kp F11    &kp F12
&trans  &ext_power EP_ON  &kp HOME        &kp UP_ARROW    &kp END    &none                                                                                 &kp EXCLAMATION  &kp LEFT_BRACE                             &kp RIGHT_BRACE                           &kp EXCL                    &none      &kp TILDE
&trans  &soft_off         &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &none                                                                                 &kp AMPS         &holdtapmod LEFT_PARENTHESIS LEFT_CONTROL  &holdtapmod RIGHT_PARENTHESIS LEFT_SHIFT  &holdtapmod EQUAL LEFT_ALT  &kp COLON  &kp GRAVE
&trans  &bt BT_CLR        &bt BT_SEL 1    &bt BT_SEL 2    &kp LG(V)  &out OUT_TOG  &holdtapmod LC(P) LG(LS(S))    &holdtapmod LC(LS(P)) LC(LS(BACKSLASH))  &kp PIPE         &kp LEFT_BRACKET                           &kp RIGHT_BRACKET                         &kp GREATER_THAN            &kp SLASH  &kp BACKSLASH
                                          &trans          &none      &trans        &trans                         &trans                                   &trans           &trans                                     &trans
            >;
        };
    };
};
